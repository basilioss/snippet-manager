@page "/app/snippet"
@page "/app/snippet/{id:int}"
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject ISnippetService SnippetService
@inject NavigationManager NavigationManager

<EditForm Model="snippet" OnSubmit="HandleSubmit">
    <div>
        <InputText id="title" @bind-Value="snippet.Title" class="form-control" />
    </div>
    <br/>
    <div>
        <StandaloneCodeEditor @ref="editor" ConstructionOptions="EditorConstructionOptions" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger"
    @onclick="DeleteSnippet">
        Delete Snippet
    </button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    SnippetManager.Shared.Snippet snippet =
        new SnippetManager.Shared.Snippet { Title = "New Snippet" };

    private StandaloneCodeEditor editor;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        this.editor = editor;

        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "javascript",
                Value = snippet.Body,
            };
    }

    async Task HandleEditorValueChanged(string value)
    {
        snippet.Body = value;
    }

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New Snippet" : "Update Snippet";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await SnippetService.GetSnippetById((int)Id);
            if (result is not null)
                snippet = result;
            else
                NavigationManager.NavigateTo("/app/snippet");
        }
    }

    async Task HandleSubmit()
    {
        var editedValue = await editor.GetValue();
        snippet.Body = editedValue;

        if (Id is null)
        {
            await SnippetService.CreateSnippet(snippet);
        }
        else
        {
            await SnippetService.UpdateSnippet((int)Id, snippet);
        }
    }

    async Task DeleteSnippet()
    {
        var editedValue = await editor.GetValue();
        await SnippetService.DeleteSnippet(snippet.Id);
    }
}