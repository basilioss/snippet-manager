@page "/app/snippet"
@page "/app/snippet/{id:int}"
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject IJSRuntime JSRuntime
@inject ISnippetService SnippetService
@inject ILanguageService LanguageService
@inject NavigationManager NavigationManager

<div class="container mx-auto mt-8 px-5 md:px-20">
    <EditForm Model="snippet" OnSubmit="HandleSubmit">
        <div class="grid-cols-10 grid gap-2 pb-4 md:pb-8 md:gap-4">
            <div class="col-span-8">
                <InputText id="title" @bind-Value="snippet.Title" class="w-full rounded-lg border px-4 py-2 shadow focus:outline-none focus:shadow-outline" />
            </div>

            <div class="col-span-2">
                <div class="relative">
                    <select id="language" class="block w-full appearance-none rounded-lg border bg-white px-4 py-2 shadow focus:outline-none focus:shadow-outline" @bind="selectedLanguage" @oninput="ChangeLanguage">
                        @foreach (var language in LanguageService.Languages)
                        {
                            <option value="@language.Name">@language.Name</option>
                        }
                    </select>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
                        <i class="fa-solid fa-angle-down"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="mb-4 overflow-hidden rounded-lg shadow md:mb-8">
            <StandaloneCodeEditor @ref="editor" ConstructionOptions="EditorConstructionOptions" />
        </div>

        <div>
            <button type="submit" class="rounded-lg border bg-white px-4 py-2 font-semibold shadow hover:bg-purple-600 hover:text-white hover:border-transparent">@btnText</button>
            <button type="button" class="ml-2 rounded-lg border bg-white px-4 py-2 font-semibold shadow hover:bg-purple-600 hover:text-white hover:border-transparent md:ml-4" @onclick="DeleteSnippet">
                Delete
            </button>
            <button type="button" class="ml-2 rounded-lg border bg-white px-4 py-2 font-semibold shadow hover:bg-purple-600 hover:text-white hover:border-transparent focus:outline-none focus:shadow-outline md:ml-4" @onclick="(() => CopyToClipboard(snippet.Id, snippet.Body))">
                Copy
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    string selectedLanguage = string.Empty;

    SnippetManager.Shared.Snippet snippet =
        new SnippetManager.Shared.Snippet { Title = "New Snippet" };

    private StandaloneCodeEditor editor;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Update";
        await LanguageService.GetLanguages();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await SnippetService.GetSnippetById((int)Id);
            if (result is not null)
            {
                snippet = result;
                selectedLanguage = LanguageService.Languages
                    .FirstOrDefault(l => l.Id == snippet.LanguageId)?.Name ?? "plaintext";
            }
            else
            {
                NavigationManager.NavigateTo("/app/snippet");
            }
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        this.editor = editor;

        return new StandaloneEditorConstructionOptions
            {
                //AutomaticLayout = true,
                Language = selectedLanguage,
                Value = snippet.Body,
            };
    }

    async Task ChangeLanguage(ChangeEventArgs e)
    {
        selectedLanguage = e.Value.ToString();
        await BlazorMonaco.Editor.Global.SetModelLanguage(await editor.GetModel(), selectedLanguage);
    }

    async Task HandleSubmit()
    {
        var editedValue = await editor.GetValue();
        snippet.Body = editedValue;
        snippet.LanguageId = LanguageService.Languages
            .FirstOrDefault(l => l.Name == selectedLanguage)?.Id ?? 1;

        if (Id is null)
        {
            await SnippetService.CreateSnippet(snippet);
        }
        else
        {
            await SnippetService.UpdateSnippet((int)Id, snippet);
        }
    }

    async Task DeleteSnippet()
    {
        var editedValue = await editor.GetValue();
        await SnippetService.DeleteSnippet(snippet.Id);
    }

    async Task CopyToClipboard(int snippetId, string snippetBody)
    {
        await JSRuntime.InvokeVoidAsync("changeCopyIconTemporary", snippetId);
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", snippetBody);
    }
}
    